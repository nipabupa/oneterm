# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# colored GCC warnings and errors
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# 启动starship
eval "$(starship init bash)"
eval "$(zoxide init bash)"

# some more ls aliases
alias ll='eza --icons -l'
alias la='eza --icons -a'
alias ls='eza --icons'
alias vi='nvim'
alias vim='nvim'
alias lz='lazygit'

# yazi
function y() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
	yazi "$@" --cwd-file="$tmp"
	IFS= read -r -d '' cwd < "$tmp"
	[ -n "$cwd" ] && [ "$cwd" != "$PWD" ] && builtin cd -- "$cwd"
	rm -f -- "$tmp"
}

# fzf搜索文件并使用nvim打开
function vif() {
    vim $(fd --type f --exclude "venv" --exclude "__pycache__" | fzf --layout=reverse --preview 'bat --color=always {}' --preview-window '~3')
}

# fzf搜索目录并进入该路径
function cdf() {
    cd $(fd --type d --exclude "venv" --exclude "__pycache__" | fzf --layout=reverse)
}

# fzf搜索文件并使用windows默认程序打开
function stf() {
    xdg-open $(fd --type f --exclude "venv" --exclude "__pycache__" | fzf --layout=reverse)
}

# 编辑配置文件
function vip() {
    vim ~/.bashrc
}

# 启动python虚拟环境
function venv() {
    if [ -d 'venv' ]; then
        source ./venv/bin/activate
    elif [ -d '.venv' ]; then
        source ./.venv/bin/activate
    fi
}

# C complie & run
function crun() {
    if [ ! -f "Makefile" ]; then
        cmake ..
        if [ $? -ne 0 ]; then
            echo "cmake失败"
            return 1
        fi
        echo "cmake完成"
    fi
    make
    if [ $? -eq 0 ]; then
        ./debug
    else
        echo "编译失败"
    fi
}
